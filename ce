- hosts: localhost
  gather_facts: no
  vars:
    my_cidrs:
      - "10.168.0.0/22"
      - "10.168.4.0/22"
      - "10.168.8.0/22"
      - "10.168.15.0/24"
    ssh_timeout: 1
  tasks:
    - name: Expand CIDRs into IP list
      command:
        argv:
          - python3
          - -c
          - |
            import ipaddress, json, sys
            nets = sys.argv[1:]
            allips = []
            for n in nets:
                net = ipaddress.ip_network(n, strict=False)
                allips.extend([str(ip) for ip in net.hosts()])
            print(json.dumps(allips))
          - "{{ my_cidrs | join(' ') }}"
      register: cidr_out
      changed_when: false

    - set_fact:
        cidr_hosts: "{{ cidr_out.stdout | from_json }}"

    - name: Probe SSH (22) quickly
      wait_for:
        host: "{{ item }}"
        port: 22
        timeout: "{{ ssh_timeout }}"
      loop: "{{ cidr_hosts }}"
      register: sshcheck
      ignore_errors: yes
      failed_when: false

    - set_fact:
        ssh_up_hosts: "{{ sshcheck.results | selectattr('failed', '==', false) | map(attribute='item') | list }}"

    - name: Verify deploy login works
      delegate_to: localhost
      command: >
        ssh -o BatchMode=yes -o StrictHostKeyChecking=no
            -o UserKnownHostsFile=/dev/null
            -o ConnectTimeout=3
            -l deploy {{ item }} true
      loop: "{{ ssh_up_hosts }}"
      register: deploy_login
      ignore_errors: yes
      failed_when: false

    - set_fact:
        deploy_hosts: "{{ deploy_login.results | selectattr('rc', 'defined') | selectattr('rc', 'eq', 0) | map(attribute='item') | list }}"

    - name: Write verified hosts to file
      copy:
        dest: ./verified_hosts.txt
        content: |
          {% for h in deploy_hosts %}
          {{ h }}
          {% endfor %}
