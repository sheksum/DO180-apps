---
- name: Deploy and trust Calix Root CA certificates
  hosts: all
  become: yes
  vars:
    cert_src_dir: /tmp/certs       # location on plnx-admin
    ubuntu_cert_dir: /usr/local/share/ca-certificates
    rhel_cert_dir: /etc/pki/ca-trust/source/anchors
    test_url: https://pln-stash.calix.local

  tasks:
    - name: Clean up old certs on Ubuntu (keep ipa*)
      ansible.builtin.shell: |
        find {{ ubuntu_cert_dir }} -type f ! -name "ipa*" -delete
      when: ansible_os_family == "Debian"

    - name: Clean up old certs on RHEL (keep ipa*)
      ansible.builtin.shell: |
        find {{ rhel_cert_dir }} -type f ! -name "ipa*" -delete
      when: ansible_os_family == "RedHat"

    - name: Copy new certificates to Ubuntu
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ ubuntu_cert_dir }}/"
        owner: root
        group: root
        mode: '0644'
      with_fileglob:
        - "{{ cert_src_dir }}/*.crt"
      when: ansible_os_family == "Debian"
      notify:
        - Update trust store on Debian/Ubuntu
        - Validate HTTPS
        - Show response headers

    - name: Copy new certificates to RHEL
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ rhel_cert_dir }}/"
        owner: root
        group: root
        mode: '0644'
      with_fileglob:
        - "{{ cert_src_dir }}/*.crt"
      when: ansible_os_family == "RedHat"
      notify:
        - Update trust store on RHEL/CentOS
        - Validate HTTPS
        - Show response headers

  handlers:
    - name: Update trust store on Debian/Ubuntu
      ansible.builtin.command: update-ca-certificates -f
      when: ansible_os_family == "Debian"
      changed_when: true

    - name: Update trust store on RHEL/CentOS
      ansible.builtin.command: update-ca-trust extract
      when: ansible_os_family == "RedHat"
      changed_when: true

    - name: Validate HTTPS
      ansible.builtin.command: curl -sS --fail -I "{{ test_url }}"
      register: curl_head
      changed_when: false
      failed_when: curl_head.rc != 0

    - name: Show response headers
      ansible.builtin.debug:
        var: curl_head.stdout_lines




========

#!/usr/bin/env bash
# Test script: seed NSS DB for two users with Root + Intermediate certs

CERTS=(
  "/usr/local/share/ca-certificates/CalixROOTCA.crt:CalixRootCA"
  "/usr/local/share/ca-certificates/Calix-Intermediate-CA1.crt:CalixIntermediateCA1"
  "/usr/local/share/ca-certificates/Calix-Intermediate-CA2.crt:CalixIntermediateCA2"
)
USERS=("user1" "user2")

for u in "${USERS[@]}"; do
  HOME_DIR=$(getent passwd "$u" | cut -d: -f6)
  if [[ -z "$HOME_DIR" || ! -d "$HOME_DIR" ]]; then
    echo "Skipping $u (no home dir)"
    continue
  fi

  DB="$HOME_DIR/.pki/nssdb"

  # Backup if exists
  if [[ -d "$DB" ]]; then
    mv "$DB" "$HOME_DIR/.pki/nssdb.backup"
    echo "[$u] existing NSS DB backed up"
  fi

  # Recreate new NSS DB
  sudo -u "$u" mkdir -p "$DB"
  sudo -u "$u" certutil -d "sql:$DB" -N --empty-password

  # Import Root + Intermediates
  for entry in "${CERTS[@]}"; do
    FILE="${entry%%:*}"
    LABEL="${entry##*:}"
    if [[ -f "$FILE" ]]; then
      sudo -u "$u" certutil -d "sql:$DB" -A -t "C,," -n "$LABEL" -i "$FILE"
      echo "[$u] Imported $LABEL"
    else
      echo "[$u] Missing cert file $FILE"
    fi
  done

  # Verification
  sudo -u "$u" certutil -d "sql:$DB" -L
done
