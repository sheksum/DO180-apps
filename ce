#!/bin/bash
set -euo pipefail

HOSTS_FILE="${HOSTS_FILE:-hosts.txt}"      # one host/IP per line
SSH_USER="${SSH_USER:-deploy}"
LOGFILE="${LOGFILE:-verify_failures.log}"

CERTS=("CalixROOTCA.crt" "CalixInterCA1.crt" "CalixInterCA2.crt")
DEBIAN_DIR="/usr/local/share/ca-certificates"
RHEL_DIR="/etc/pki/ca-trust/source/anchors"
TEST_URL="${TEST_URL:-https://pln-stash.calix.local}"

# timeouts
SSH_CONNECT_TO="${SSH_CONNECT_TO:-6}"
SSH_CMD_TO="${SSH_CMD_TO:-10}"
CURL_MAX_TIME="${CURL_MAX_TIME:-6}"

# quiet, non-interactive SSH
SSH_OPTS=(-o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
          -o LogLevel=ERROR -o ConnectTimeout="${SSH_CONNECT_TO}"
          -o ConnectionAttempts=1 -o ServerAliveInterval=3 -o ServerAliveCountMax=1)

ts() { date +'%F %T'; }
log_fail() { echo "$(ts) $1" >> "$LOGFILE"; }

: > "$LOGFILE"

while IFS= read -r host; do
  [[ -z "$host" || "$host" =~ ^# ]] && continue

  missing=0; https_ok=0; os_ok=1; ca_dir=""

  # detect OS family
  if ! OS_LINE=$(timeout "$SSH_CMD_TO" ssh "${SSH_OPTS[@]}" "$SSH_USER@$host" \
      'source /etc/os-release 2>/dev/null; echo "${ID_LIKE:-$ID}"' 2>/dev/null); then
    os_ok=0
    log_fail "$host - SSH/OS-detect timeout or failure"
    echo "$host  FAIL  (ssh/os-detect)"
    continue
  fi

  if [[ "$OS_LINE" == *debian* || "$OS_LINE" == *ubuntu* ]]; then
    ca_dir="$DEBIAN_DIR"
  else
    ca_dir="$RHEL_DIR"
  fi

  # cert presence checks
  for c in "${CERTS[@]}"; do
    if ! timeout "$SSH_CMD_TO" ssh "${SSH_OPTS[@]}" "$SSH_USER@$host" "[ -f '$ca_dir/$c' ]"; then
      ((missing++))
      log_fail "$host - missing $ca_dir/$c"
    fi
  done

  # HTTPS trust probe
  if timeout "$SSH_CMD_TO" ssh "${SSH_OPTS[@]}" "$SSH_USER@$host" \
      "curl -sS -I --max-time ${CURL_MAX_TIME} '$TEST_URL' >/dev/null 2>&1"; then
    https_ok=1
  else
    log_fail "$host - HTTPS trust failed for $TEST_URL"
  fi

  if (( os_ok==1 && missing==0 && https_ok==1 )); then
    echo "$host  OK    (dir: $ca_dir)"
  else
    echo "$host  FAIL  (dir: $ca_dir, missing:$missing, https:$([[ $https_ok == 1 ]] && echo OK || echo FAIL))"
  fi
done < "$HOSTS_FILE"

echo "Failures logged to $LOGFILE"
