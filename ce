---
- name: Deploy and trust Calix Root CA certificates
  hosts: all
  become: yes
  vars:
    cert_src_dir: /tmp/certs       # location on plnx-admin
    ubuntu_cert_dir: /usr/local/share/ca-certificates
    rhel_cert_dir: /etc/pki/ca-trust/source/anchors
    test_url: https://pln-stash.calix.local

  tasks:
    - name: Clean up old certs on Ubuntu (keep ipa*)
      ansible.builtin.shell: |
        find {{ ubuntu_cert_dir }} -type f ! -name "ipa*" -delete
      when: ansible_os_family == "Debian"

    - name: Clean up old certs on RHEL (keep ipa*)
      ansible.builtin.shell: |
        find {{ rhel_cert_dir }} -type f ! -name "ipa*" -delete
      when: ansible_os_family == "RedHat"

    - name: Copy new certificates to Ubuntu
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ ubuntu_cert_dir }}/"
        owner: root
        group: root
        mode: '0644'
      with_fileglob:
        - "{{ cert_src_dir }}/*.crt"
      when: ansible_os_family == "Debian"
      notify:
        - Update trust store on Debian/Ubuntu
        - Validate HTTPS
        - Show response headers

    - name: Copy new certificates to RHEL
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ rhel_cert_dir }}/"
        owner: root
        group: root
        mode: '0644'
      with_fileglob:
        - "{{ cert_src_dir }}/*.crt"
      when: ansible_os_family == "RedHat"
      notify:
        - Update trust store on RHEL/CentOS
        - Validate HTTPS
        - Show response headers

  handlers:
    - name: Update trust store on Debian/Ubuntu
      ansible.builtin.command: update-ca-certificates -f
      when: ansible_os_family == "Debian"
      changed_when: true

    - name: Update trust store on RHEL/CentOS
      ansible.builtin.command: update-ca-trust extract
      when: ansible_os_family == "RedHat"
      changed_when: true

    - name: Validate HTTPS
      ansible.builtin.command: curl -sS --fail -I "{{ test_url }}"
      register: curl_head
      changed_when: false
      failed_when: curl_head.rc != 0

    - name: Show response headers
      ansible.builtin.debug:
        var: curl_head.stdout_lines




========#!/usr/bin/env bash
# seed-two-users-nssdb.sh
# Aligns with the exact working commands you tested.

USERS=("user1" "user2")   # <-- replace with real logins

for u in "${USERS[@]}"; do
  HOME_DIR=$(getent passwd "$u" | cut -d: -f6) || true
  [[ -z "$HOME_DIR" || ! -d "$HOME_DIR" ]] && { echo "Skip $u (no home)"; continue; }

  DB="$HOME_DIR/.pki/nssdb"

  # Backup old DB if it exists
  if [[ -d "$DB" ]]; then
    mv "$DB" "$HOME_DIR/.pki/nssdb.backup"
    echo "[$u] backup of nssdb created"
  fi

  # Recreate DB with empty password
  sudo -u "$u" mkdir -p "$DB"
  sudo -u "$u" certutil -d "sql:$DB" -N --empty-password

  # Import certs with the correct labels
  sudo -u "$u" certutil -d "sql:$DB" -A -t "C,," -n "CalixRootCA"  -i /usr/local/share/ca-certificates/CalixROOTCA.crt
  sudo -u "$u" certutil -d "sql:$DB" -A -t "C,," -n "CalixInterCA" -i /usr/local/share/ca-certificates/CalixInterCA2.crt
  sudo -u "$u" certutil -d "sql:$DB" -A -t "C,," -n "CalixEntCA"   -i /usr/local/share/ca-certificates/CalixInterCA1.crt

  # Show final DB contents for verification
  echo "[$u] NSS DB contents:"
  sudo -u "$u" certutil -d "sql:$DB" -L
done
