#!/usr/bin/env bash
# Usage: SSH_KEY=~/.ssh/deploy_key ./simple-ubuntu-patch.sh hosts.txt
# Runs: apt-get clean -> apt-get update -> apt-get upgrade -y -> reboot if required
# Live output is shown and also appended to ./simple-patch.log

set -uo pipefail   # (no -e, so one host failure won't stop the whole loop)

HOSTS_FILE="${1:-}"
SSH_KEY="${SSH_KEY:-$HOME/.ssh/deploy_key}"
USER="${USER:-deploy}"
SSH_OPTS="-o BatchMode=yes -o StrictHostKeyChecking=no -o ConnectTimeout=15"
LOGFILE="./simple-patch.log"

# --- sanity checks ---
if [[ -z "$HOSTS_FILE" ]]; then
  echo "Usage: $0 <hosts_file>"
  exit 1
fi
[[ -f "$HOSTS_FILE" ]] || { echo "Missing hosts file: $HOSTS_FILE"; exit 1; }
[[ -f "$SSH_KEY"   ]]  || { echo "Missing SSH key: $SSH_KEY"; exit 1; }

echo "Run started $(date)" | tee -a "$LOGFILE"

ok=0; fail=0
while IFS= read -r host; do
  # skip blanks and comments
  [[ -z "$host" || "$host" =~ ^# ]] && continue
  # trim any CR from Windows line endings
  host="${host%$'\r'}"

  echo "=== $host ===" | tee -a "$LOGFILE"

  # Send the remote commands via a heredoc; stream to terminal and log
  ssh -tt -i "$SSH_KEY" $SSH_OPTS "${USER}@${host}" bash -s <<'REMOTE' 2>&1 | tee -a "$LOGFILE"
set -e
export DEBIAN_FRONTEND=noninteractive

# clear typical locks (safe if absent)
sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock || true

echo "→ apt-get clean"
sudo apt-get clean -y || true

echo "→ apt-get update"
sudo apt-get update -y

echo "→ apt-get upgrade -y"
sudo apt-get -yq \
  -o Dpkg::Options::="--force-confdef" \
  -o Dpkg::Options::="--force-confold" \
  upgrade

echo "→ housekeeping"
sudo apt-get -y autoremove || true
sudo apt-get -y autoclean  || true

if [[ -f /var/run/reboot-required ]]; then
  echo "REBOOTING"
  sudo /sbin/reboot
else
  echo "NO-REBOOT"
fi
REMOTE

  rc=${PIPESTATUS[0]}  # ssh exit status (not tee's)
  if [[ $rc -eq 0 ]]; then
    ((ok++))
  else
    # Nonzero is common if the host rebooted mid-SSH; don't stop the loop.
    echo "WARN: $host returned rc=$rc (possibly reboot in progress)" | tee -a "$LOGFILE"
    ((ok++))  # count as success; change to 'fail++' if you prefer strict accounting
  fi
done < "$HOSTS_FILE"

echo "Run completed $(date): succeeded=$ok failed=$fail" | tee -a "$LOGFILE"
