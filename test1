import subprocess
import json
import requests

# List of clusters
clusters = ["kqde1gen-1", "kqde1gen-2", "kva1gen-1", "kde1gen-1", "kva3gen-1"]

# Function to get namespaces in the cluster
def get_kubectl_namespaces(cluster):
    """Get the list of namespaces for a specific cluster."""
    try:
        subprocess.run(["kubectl", "config", "use-context", cluster], check=True, capture_output=True)
        result = subprocess.run(
            ["kubectl", "get", "namespaces", "-o", "jsonpath='{.items[*].metadata.name}'"],
            check=True, capture_output=True, text=True
        )
        namespaces = result.stdout.replace("'", "").split()
        return namespaces
    except subprocess.CalledProcessError as e:
        print(f"Error while retrieving namespaces for cluster {cluster}: {e}")
        return []

# Function to get Calico IP pools
def get_calico_ip_pools():
    """Get the list of IP pools from Calico."""
    try:
        result = subprocess.run(
            ["calicoctl", "get", "ippool", "--allow-version-mismatch", "-o", "json"],
            check=True, capture_output=True, text=True
        )
        ippools = json.loads(result.stdout)["items"]
        return [pool["metadata"]["name"] for pool in ippools]
    except subprocess.CalledProcessError as e:
        print(f"Error while retrieving IP pools: {e}")
        return []

# Function to fetch NetBox IP pools
def get_netbox_ip_pools():
    """Get the list of IP pools from NetBox."""
    try:
        url = "https://netbox.yourcompany.com/api/ipam/prefixes/"
        headers = {"Authorization": "Token YOUR_NETBOX_TOKEN"}
        response = requests.get(url, headers=headers)

        if response.status_code == 200:
            data = response.json()
            return {item["prefix"]: item["id"] for item in data["results"]}  # Return a dictionary with prefix as key
        else:
            print(f"Error fetching data from NetBox: {response.status_code}")
            return {}
    except requests.exceptions.RequestException as e:
        print(f"Error while retrieving data from NetBox: {e}")
        return {}

# Function to update prefixes for each cluster
def update_prefixes_for_cluster(cluster, netbox_ip_pools):
    """Update the prefixes for each Kubernetes cluster."""
    print(f"Updating prefixes for cluster: {cluster}")
    
    # Get Kubernetes IP pools and namespaces
    namespaces = get_kubectl_namespaces(cluster)
    kubernetes_ip_pools = get_calico_ip_pools()

    # Check each IP pool and update based on the NetBox data
    for ippool in kubernetes_ip_pools:
        # Extract the namespace from the IP pool name
        if "-" in ippool:
            namespace = ippool.split('-')[0]
            
            if namespace in namespaces:
                # Check if the prefix exists in NetBox
                if any(ippool.startswith(prefix) for prefix in netbox_ip_pools.keys()):
                    print(f"{namespace:<40} {'Cleanup not needed':<20}")
                else:
                    print(f"{namespace:<40} {'Cleanup needed':<20}")
                    # You can delete the IP pool here using `calicoctl`
                    delete_ip_pool(ippool)
            else:
                print(f"{namespace:<40} {'Cleanup needed':<20}")
                # You can delete the IP pool here using `calicoctl`
                delete_ip_pool(ippool)
        else:
            print(f"{ippool:<40} {'Invalid IP pool format':<20}")

# Function to delete an IP pool using Calicoctl
def delete_ip_pool(ippool):
    """Delete an IP pool using calicoctl."""
    try:
        print(f"Deleting IP pool: {ippool}")
        subprocess.run(["calicoctl", "delete", "ippool", ippool], check=True)
        print(f"IP pool '{ippool}' deleted successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error while deleting IP pool '{ippool}': {e}")

# Print table header
def print_header():
    """Print the header for the table."""
    print(f"{'Namespace':<40} {'Statement':<20}")
    print(f"{'-'*40} {'-'*20}")

# Main function to check and compare IP pools
def check_and_update_ip_pools():
    """Main function to compare and update IP pools."""
    # Fetch NetBox data
    netbox_ip_pools = get_netbox_ip_pools()

    if not netbox_ip_pools:
        print("No IP pools found in NetBox. Exiting.")
        return

    # Print table header
    print_header()

    # Loop through each cluster and update prefixes
    for cluster in clusters:
        update_prefixes_for_cluster(cluster, netbox_ip_pools)

# Run the check and update
check_and_update_ip_pools()
