import subprocess
import json
import requests

# List of clusters
clusters = ["kqde1gen-1", "kqde1gen-2", "kva1gen-1", "kde1gen-1", "kva3gen-1"]

# Function to get namespaces in the cluster
def get_kubectl_namespaces(cluster):
    """Get the list of namespaces for a specific cluster."""
    try:
        subprocess.run(["kubectl", "config", "use-context", cluster], check=True, capture_output=True)
        result = subprocess.run(
            ["kubectl", "get", "namespaces", "-o", "jsonpath='{.items[*].metadata.name}'"],
            check=True, capture_output=True, text=True
        )
        namespaces = result.stdout.replace("'", "").split()
        return namespaces
    except subprocess.CalledProcessError as e:
        print(f"Error while retrieving namespaces for cluster {cluster}: {e}")
        return []

# Function to get Calico IP pools
def get_calico_ip_pools():
    """Get the list of IP pools from Calico."""
    try:
        result = subprocess.run(
            ["calicoctl", "get", "ippool", "--allow-version-mismatch", "-o", "json"],
            check=True, capture_output=True, text=True
        )
        ippools = json.loads(result.stdout)["items"]
        return [pool["metadata"]["name"] for pool in ippools]
    except subprocess.CalledProcessError as e:
        print(f"Error while retrieving IP pools: {e}")
        return []

# Function to fetch NetBox prefixes
def get_netbox_prefixes():
    """Get the list of prefixes (namespace) from NetBox."""
    try:
        url = "https://netbox.yourcompany.com/api/ipam/prefixes/"
        headers = {"Authorization": "Token YOUR_NETBOX_TOKEN"}
        response = requests.get(url, headers=headers)

        if response.status_code == 200:
            data = response.json()
            return [item["prefix"] for item in data["results"]]
        else:
            print(f"Error fetching data from NetBox: {response.status_code}")
            return []
    except requests.exceptions.RequestException as e:
        print(f"Error while retrieving data from NetBox: {e}")
        return []

# Print table header
def print_header():
    """Print the header for the table."""
    print(f"{'Prefix (Namespace)':<40} {'IP Pools':<40}")
    print(f"{'-'*40} {'-'*40}")

# Main function to check and print IP pools for each prefix
def print_ip_pools_per_prefix():
    """Main function to print the list of IP pools for each prefix."""
    # Fetch NetBox prefixes
    netbox_prefixes = get_netbox_prefixes()

    if not netbox_prefixes:
        print("No prefixes found in NetBox. Exiting.")
        return

    # Print table header
    print_header()

    # Loop through each cluster to get the IP pools
    for cluster in clusters:
        print(f"\nChecking IP pools in cluster: {cluster}")
        
        # Get namespaces and IP pools from Kubernetes
        namespaces = get_kubectl_namespaces(cluster)
        kubernetes_ip_pools = get_calico_ip_pools()

        # Loop through each prefix and print the associated IP pools
        for prefix in netbox_prefixes:
            associated_pools = [ippool for ippool in kubernetes_ip_pools if ippool.startswith(prefix)]
            if associated_pools:
                print(f"{prefix:<40} {', '.join(associated_pools):<40}")

# Run the script to print IP pools per prefix
print_ip_pools_per_prefix()
