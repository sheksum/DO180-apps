import requests

# Configuration: replace with your NetBox URL and token
NETBOX_URL = "http://netbox.example.com/api/"  # Base API URL (ensure it ends with /)
API_TOKEN = "0123456789abcdef0123456789abcdef01234567"  # Your NetBox API token

parent_prefix_id = 123  # ID of the parent prefix to query (example ID)

# Prepare headers for authentication
headers = {
    "Authorization": f"Token {API_TOKEN}",
    "Accept": "application/json"
}

# Construct the URL for the parent prefix detail endpoint
parent_url = f"{NETBOX_URL}ipam/prefixes/{parent_prefix_id}/"

try:
    # 1. Fetch the parent prefix details
    response = requests.get(parent_url, headers=headers)
    # Raise an error if the request was not successful (status != 200)
    response.raise_for_status()
except requests.exceptions.HTTPError as http_err:
    print(f"HTTP error occurred while retrieving parent prefix: {http_err}")
    exit(1)
except requests.exceptions.RequestException as err:
    # This catches any network-related errors (connection issues, timeouts, etc.)
    print(f"Error connecting to NetBox API: {err}")
    exit(1)

# Parse parent prefix data
parent_data = response.json()
parent_prefix = parent_data.get("prefix")  # e.g. "10.50.0.0/16"
if not parent_prefix:
    print("Parent prefix not found or missing 'prefix' data in response.")
    exit(1)

print(f"Parent Prefix (ID {parent_prefix_id}): {parent_prefix}")

# 2. Fetch child prefixes using the 'within' filter
# URL-encode the prefix if constructing manually (requests will handle encoding in params)
children_url = f"{NETBOX_URL}ipam/prefixes/"
params = {"within": parent_prefix}  # using params dict to let requests handle URL encoding

try:
    response_children = requests.get(children_url, headers=headers, params=params)
    response_children.raise_for_status()
except requests.exceptions.HTTPError as http_err:
    print(f"HTTP error occurred while retrieving child prefixes: {http_err}")
    exit(1)
except requests.exceptions.RequestException as err:
    print(f"Error connecting to NetBox API for child prefixes: {err}")
    exit(1)

# Parse child prefixes data
children_data = response_children.json()
child_prefixes = children_data.get("results", [])

# 3. Display child prefixes in a structured format
if not child_prefixes:
    print(f"No child prefixes found for {parent_prefix}.")
else:
    print(f"Child prefixes of {parent_prefix}:")
    for cp in child_prefixes:
        # Each cp is a prefix object (dict). Extract some useful fields:
        cidr = cp.get("prefix", "<unknown>")
        cidr_status = cp.get("status", {})
        status_label = cidr_status.get("label") if isinstance(cidr_status, dict) else str(cidr_status)
        prefix_id = cp.get("id", "")
        # Print child prefix details
        print(f" - ID {prefix_id}: {cidr} (Status: {status_label})")
