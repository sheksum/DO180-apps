#!/usr/bin/env bash
# dedicate-varlog.sh  (stages under /data)
# Usage:
#   sudo ./dedicate-varlog.sh /dev/sdX [--mkfs ext4|xfs] [--label NAME] [--opts "nodev,noexec,nosuid"] [--dry-run]

set -euo pipefail

DRY_RUN=0
DEV="${1:-}"; shift || true
[[ -n "${DEV}" ]] || { echo "Usage: $0 /dev/sdX [--mkfs ext4|xfs] [--label NAME] [--opts \"nodev,noexec,nosuid\"] [--dry-run]"; exit 1; }
[[ ${EUID:-$(id -u)} -eq 0 ]] || { echo "Please run as root (sudo)."; exit 1; }

# Defaults
DO_MKFS=0
FSTYPE=""
LABEL=""
MNTOPTS="nodev,noexec,nosuid"
MOUNTPOINT="/var/log"
BACKUP="/var/log.bak.$(date +%Y%m%d-%H%M%S)"
STAGE="/data"

# Options
while (( "$#" )); do
  case "$1" in
    --mkfs) DO_MKFS=1; FSTYPE="${2:-}"; shift 2;;
    --label) LABEL="${2:-}"; shift 2;;
    --opts) MNTOPTS="${2:-}"; shift 2;;
    --dry-run) DRY_RUN=1; shift;;
    *) echo "Unknown option: $1"; exit 1;;
  esac
done

run(){ if [[ $DRY_RUN -eq 1 ]]; then echo "[DRY-RUN] $*"; else eval "$@"; fi; }
need(){ command -v "$1" >/dev/null 2>&1 || { echo "Missing '$1'."; exit 1; }; }
need rsync; need blkid; need mount; need grep; need sed; command -v logger >/dev/null 2>&1 || true

# Safety
[[ -b "${DEV}" ]] || { echo "Device ${DEV} is not a block device."; exit 1; }
mount | grep -qE " on ${MOUNTPOINT} " && { echo "${MOUNTPOINT} already separate. Exit."; exit 0; }
mount | grep -qE "^${DEV} " && { echo "Device ${DEV} already mounted elsewhere."; exit 1; }

# Optional mkfs
if [[ $DO_MKFS -eq 1 ]]; then
  [[ "${FSTYPE}" =~ ^(ext4|xfs)$ ]] || { echo "Supported mkfs: ext4|xfs"; exit 1; }
  echo "About to format ${DEV} as ${FSTYPE}."
  if [[ $DRY_RUN -eq 0 ]]; then read -r -p "Type 'YES' to proceed: " ACK; [[ "$ACK" == "YES" ]] || { echo "Aborted."; exit 1; }; fi
  [[ "${FSTYPE}" == "ext4" ]] && run mkfs.ext4 -F ${LABEL:+-L "$LABEL"} "${DEV}" || run mkfs.xfs -f ${LABEL:+-L "$LABEL"} "${DEV}"
fi

# Must have a FS now
blkid "${DEV}" >/dev/null 2>&1 || { echo "No filesystem on ${DEV}. Use --mkfs."; exit 1; }
UUID="$(blkid -s UUID -o value "${DEV}")"
TYPE="$(blkid -s TYPE -o value "${DEV}")"
echo "Device: ${DEV}  UUID: ${UUID}  TYPE: ${TYPE}"
echo "Mount options: ${MNTOPTS}"

# rsyslog: mask -> stop
if systemctl list-unit-files 2>/dev/null | grep -q '^rsyslog\.service'; then
  run "systemctl mask rsyslog.service || true"
  run "systemctl stop rsyslog.service || true"
fi

# Make stage + backup
run "mkdir -p '${STAGE}'"
run "mkdir -p '${BACKUP}'"
run "mkdir -p '${MOUNTPOINT}'"

echo "Backing up current /var/log to ${BACKUP} ..."
run "rsync -aHAX --numeric-ids --sparse --one-file-system '${MOUNTPOINT}/' '${BACKUP}/'"

# Mount at /data, copy, then switch
echo "Mounting ${DEV} at ${STAGE} ..."
run "mount -t '${TYPE}' -o '${MNTOPTS}' '${DEV}' '${STAGE}'"

echo "Copying logs into ${STAGE} ..."
run "rsync -aHAX --numeric-ids --sparse --one-file-system '${BACKUP}/' '${STAGE}/'"
run "sync"

echo "Unmounting ${STAGE} ..."
if ! run "umount '${STAGE}'"; then
  echo "Normal unmount failed, trying lazy..." >&2
  run "umount -l '${STAGE}'"
fi

echo "Mounting ${DEV} on ${MOUNTPOINT} ..."
run "mount -t '${TYPE}' -o '${MNTOPTS}' '${DEV}' '${MOUNTPOINT}'"

# fstab (idempotent)
FSTAB_LINE="UUID=${UUID}  ${MOUNTPOINT}  ${TYPE}  ${MNTOPTS}  0  2"
grep -q "UUID=${UUID}.*${MOUNTPOINT}" /etc/fstab || run "printf '%s\n' \"${FSTAB_LINE}\" >> /etc/fstab"

run mount -a

# rsyslog back
if systemctl list-unit-files 2>/dev/null | grep -q '^rsyslog\.service'; then
  run "systemctl unmask rsyslog.service || true"
  run "systemctl restart rsyslog.service || true"
fi

# Smoke test + verify
command -v logger >/dev/null 2>&1 && run "logger 'TEST: /var/log dedicated to ${DEV}'"
SYSLOG_FILE=""; [[ -f /var/log/syslog ]] && SYSLOG_FILE=/var/log/syslog; [[ -z "$SYSLOG_FILE" && -f /var/log/messages ]] && SYSLOG_FILE=/var/log/messages

echo; echo "==== Verification ===="
run "mount | grep ' ${MOUNTPOINT} ' || true"
run "df -h '${MOUNTPOINT}' || true"
run "ls -l '${MOUNTPOINT}' | head || true"
[[ -n "$SYSLOG_FILE" ]] && run "tail -n3 '${SYSLOG_FILE}' || true"
echo "Logrotate (dry-run):"; run "logrotate -d /etc/logrotate.conf || true"

echo
echo "Done. Backup kept at: ${BACKUP}"
echo "Rollback:"
echo "  1) systemctl mask rsyslog.service; systemctl stop rsyslog.service"
echo "  2) umount ${MOUNTPOINT}; sed -i '\\|UUID=${UUID} .* ${MOUNTPOINT}|d' /etc/fstab"
echo "  3) rsync -aHAX ${BACKUP}/ ${MOUNTPOINT}/"
echo "  4) systemctl unmask rsyslog.service; systemctl restart rsyslog.service"
