#!/usr/bin/env bash
# dedicate-varlog.sh (interactive Ubuntu version with SCSI rescan)
# Scans for new devices, asks for disk, confirms mkfs, follows your /data → /var/log doc.

set -euo pipefail
[[ ${EUID:-$(id -u)} -eq 0 ]] || { echo "Run as root (sudo)."; exit 1; }

echo "🔍 Rescanning all SCSI hosts for new devices..."
for host in /sys/class/scsi_host/*; do
  echo "- - -" | sudo tee "${host}/scan" >/dev/null
done

echo "⏳ Waiting for devices to settle..."
sleep 10

echo "🔎 Listing all block devices..."
lsblk -dpno NAME,SIZE,TYPE,MOUNTPOINT | grep "disk" || true
echo

read -rp "Enter the device you want to dedicate for /var/log (e.g. /dev/sdd): " DEV
[[ -b "$DEV" ]] || { echo "❌ $DEV is not a valid block device."; exit 1; }

read -rp "Do you want to create a new filesystem on $DEV? (y/N): " CONFIRM_MKFS
DO_MKFS=0; FSTYPE="ext4"
if [[ "$CONFIRM_MKFS" =~ ^[Yy]$ ]]; then
  read -rp "Enter filesystem type [ext4|xfs] (default: ext4): " FS
  FSTYPE="${FS:-ext4}"
  [[ "$FSTYPE" =~ ^(ext4|xfs)$ ]] || { echo "Unsupported type."; exit 1; }
  echo "⚠️  This will ERASE all data on $DEV."
  read -rp "Type YES to confirm formatting $DEV as $FSTYPE: " ACK
  [[ "$ACK" == "YES" ]] || { echo "Aborted."; exit 1; }
  DO_MKFS=1
fi

LABEL="VARLOG"
MNTOPTS="nodev,noexec,nosuid"
MOUNTPOINT="/var/log"
STAGE="/data"
TS="$(date +%Y%m%d-%H%M%S)"
BACKUP="${MOUNTPOINT}.bak.${TS}"

# Optional mkfs
if [[ $DO_MKFS -eq 1 ]]; then
  echo "Creating $FSTYPE filesystem on $DEV..."
  [[ "$FSTYPE" == "ext4" ]] && mkfs.ext4 -F -L "$LABEL" "$DEV" || mkfs.xfs -f -L "$LABEL" "$DEV"
fi

blkid "$DEV" >/dev/null 2>&1 || { echo "No filesystem found on $DEV."; exit 1; }
UUID="$(blkid -s UUID -o value "$DEV")"
TYPE="$(blkid -s TYPE -o value "$DEV")"

echo "✅ Device ready: $DEV (UUID=$UUID, TYPE=$TYPE)"
sleep 2

echo "Masking & stopping rsyslog.service..."
systemctl mask rsyslog.service || true
systemctl stop rsyslog.service || true

mkdir -p "$STAGE" "$MOUNTPOINT"
echo "Mounting $DEV on $STAGE ..."
mount -t "$TYPE" -o "$MNTOPTS" "$DEV" "$STAGE"

echo "Rsyncing logs: ${MOUNTPOINT}/ → ${STAGE}/ ..."
rsync -aHAX --numeric-ids --sparse --one-file-system "${MOUNTPOINT}/" "${STAGE}/"
sync

echo "Moving ${MOUNTPOINT} → ${BACKUP} ..."
mv "$MOUNTPOINT" "$BACKUP"
mkdir -p "$MOUNTPOINT"

echo "Unmounting $STAGE and remounting on ${MOUNTPOINT} ..."
umount "$STAGE" || umount -l "$STAGE"
mount -t "$TYPE" -o "$MNTOPTS" "$DEV" "$MOUNTPOINT"

FSTAB_LINE="UUID=${UUID}  ${MOUNTPOINT}  ${TYPE}  ${MNTOPTS}  0  2"
grep -q "UUID=${UUID}.*${MOUNTPOINT}" /etc/fstab || echo "$FSTAB_LINE" >> /etc/fstab
mount -a

echo "Unmasking and restarting rsyslog.service..."
systemctl unmask rsyslog.service || true
systemctl daemon-reload
systemctl restart rsyslog.service || true

echo "Running logrotate -vf /etc/logrotate.conf ..."
logrotate -vf /etc/logrotate.conf || true

echo
echo "=== Verification ==="
mount | grep " ${MOUNTPOINT} " || true
df -h "${MOUNTPOINT}" || true
logger "TEST: /var/log dedicated mount active; rsyslog running"
tail -n3 /var/log/syslog 2>/dev/null || tail -n3 /var/log/messages || true
echo
echo "✅ Completed. Previous logs are in ${BACKUP}"
