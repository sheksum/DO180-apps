#!/usr/bin/env bash
# dedicate-varlog.sh ‚Äî Interactive Ubuntu version
# Safely dedicates a block device to /var/log with /data staging and rollback info.

set -euo pipefail
[[ ${EUID:-$(id -u)} -eq 0 ]] || { echo "Run as root (sudo)."; exit 1; }

echo "üîç Rescanning all SCSI hosts for new devices..."
for host in /sys/class/scsi_host/*; do
  echo "- - -" | sudo tee "${host}/scan" >/dev/null
done

echo "‚è≥ Waiting for devices to settle..."
sleep 10

echo "üîé Listing all available block devices..."
lsblk -dpno NAME,SIZE,TYPE,MOUNTPOINT | grep "disk" || true
echo

read -rp "Enter the device you want to dedicate for /var/log (e.g. /dev/sdd): " DEV
[[ -b "$DEV" ]] || { echo "‚ùå $DEV is not a valid block device."; exit 1; }

read -rp "Do you want to create a new filesystem on $DEV? (y/N): " CONFIRM_MKFS
DO_MKFS=0; FSTYPE="ext4"
if [[ "$CONFIRM_MKFS" =~ ^[Yy]$ ]]; then
  read -rp "Enter filesystem type [ext4|xfs] (default: ext4): " FS
  FSTYPE="${FS:-ext4}"
  [[ "$FSTYPE" =~ ^(ext4|xfs)$ ]] || { echo "Unsupported type."; exit 1; }
  echo "‚ö†Ô∏è  This will ERASE all data on $DEV."
  read -rp "Type YES to confirm formatting $DEV as $FSTYPE: " ACK
  [[ "$ACK" == "YES" ]] || { echo "Aborted."; exit 1; }
  DO_MKFS=1
fi

LABEL="VARLOG"
MNTOPTS="nodev,noexec,nosuid"
MOUNTPOINT="/var/log"
STAGE="/data"
TS="$(date +%Y%m%d-%H%M%S)"
BACKUP="${MOUNTPOINT}.bak.${TS}"

# --- Format if requested ---
if [[ $DO_MKFS -eq 1 ]]; then
  echo "Creating $FSTYPE filesystem on $DEV..."
  [[ "$FSTYPE" == "ext4" ]] && mkfs.ext4 -F -L "$LABEL" "$DEV" || mkfs.xfs -f -L "$LABEL" "$DEV"
fi

blkid "$DEV" >/dev/null 2>&1 || { echo "No filesystem found on $DEV."; exit 1; }
UUID="$(blkid -s UUID -o value "$DEV")"
TYPE="$(blkid -s TYPE -o value "$DEV")"
echo "‚úÖ Device ready: $DEV (UUID=$UUID, TYPE=$TYPE)"
sleep 2

# --- Stop rsyslog before migration ---
echo "Masking & stopping rsyslog.service..."
systemctl mask rsyslog.service || true
systemctl stop rsyslog.service || true

# --- Stage copy to /data ---
mkdir -p "$STAGE" "$MOUNTPOINT"
echo "Mounting $DEV on $STAGE ..."
mount -t "$TYPE" -o "$MNTOPTS" "$DEV" "$STAGE"

echo "Copying logs: ${MOUNTPOINT}/ ‚Üí ${STAGE}/ ..."
rsync -aHAX --numeric-ids --sparse --one-file-system "${MOUNTPOINT}/" "${STAGE}/"
sync

# --- Backup and switch mount ---
echo "Moving ${MOUNTPOINT} ‚Üí ${BACKUP} ..."
mv "$MOUNTPOINT" "$BACKUP"
mkdir -p "$MOUNTPOINT"

echo "Unmounting $STAGE and remounting on ${MOUNTPOINT} ..."
umount "$STAGE" || umount -l "$STAGE"
mount -t "$TYPE" -o "$MNTOPTS" "$DEV" "$MOUNTPOINT"

# --- Persist in /etc/fstab ---
FSTAB_LINE="UUID=${UUID}  ${MOUNTPOINT}  ${TYPE}  ${MNTOPTS}  0  2"
if ! grep -q "UUID=${UUID}.*${MOUNTPOINT}" /etc/fstab; then
  echo "$FSTAB_LINE" >> /etc/fstab
  echo "Added to /etc/fstab: $FSTAB_LINE"
else
  echo "/etc/fstab already contains an entry for this UUID."
fi
mount -a

# --- Restart rsyslog + logrotate ---
echo "Unmasking and restarting rsyslog.service..."
systemctl unmask rsyslog.service || true
systemctl daemon-reload
systemctl restart rsyslog.service || true

echo "Running logrotate -vf /etc/logrotate.conf ..."
logrotate -vf /etc/logrotate.conf || true

# --- Verification ---
echo
echo "=== Verification ==="
mount | grep " ${MOUNTPOINT} " || true
df -h "${MOUNTPOINT}" || true

logger "TEST: dedicated /var/log mount active; rsyslog running"
sleep 2  # allow rsyslog to write

echo "Checking for logger entry in logs..."
if [[ -f /var/log/syslog ]]; then
  grep "TEST: dedicated" /var/log/syslog || echo "‚ö†Ô∏è  Log message not found in /var/log/syslog"
elif [[ -f /var/log/messages ]]; then
  grep "TEST: dedicated" /var/log/messages || echo "‚ö†Ô∏è  Log message not found in /var/log/messages"
else
  echo "‚ö†Ô∏è  Neither /var/log/syslog nor /var/log/messages found."
fi

echo
echo "‚úÖ Completed. Previous logs are in ${BACKUP}"

# --- Rollback instructions ---
echo
echo "=============================="
echo "üß≠  ROLLBACK INSTRUCTIONS"
echo "=============================="
echo "If you ever need to revert /var/log to its previous state:"
echo
echo "  1) Stop rsyslog to release file handles:"
echo "     systemctl stop rsyslog || { systemctl mask rsyslog; systemctl stop rsyslog; }"
echo
echo "  2) Unmount the new /var/log device:"
echo "     umount /var/log || umount -l /var/log"
echo
echo "  3) Remove its /etc/fstab entry:"
echo "     sed -i '/UUID=.*\\/var\\/log/d' /etc/fstab"
echo
echo "  4) Restore previous logs from backup:"
echo "     rm -rf /var/log"
echo "     mv /var/log.bak.* /var/log"
echo
echo "  5) Unmask and restart rsyslog:"
echo "     systemctl unmask rsyslog"
echo "     systemctl daemon-reload"
echo "     systemctl restart rsyslog"
echo
echo "  6) Verify rsyslog is logging again:"
echo "     systemctl status rsyslog"
echo "     logger 'TEST: rollback to original /var/log successful'"
echo "     grep 'rollback' /var/log/syslog || grep 'rollback' /var/log/messages"
echo
echo "‚úÖ Rollback instructions printed above ‚Äî keep for reference."
echo "=============================="
