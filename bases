- name: Register systems with Landscape On-Prem
  hosts: all
  become: true
  vars:
    landscape_server_ip: 10.172.249.104

  tasks:

    - name: Stop Landscape client (optional)
      service:
        name: landscape-client
        state: stopped
      ignore_errors: true
      tags: reset

    - name: Remove old client registration files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/landscape/client.conf
        - /var/lib/landscape/landscape-id
      tags: reset

    - name: Try updating apt cache (continue even if it fails)
      apt:
        update_cache: yes
        cache_valid_time: 3600
      ignore_errors: true

    - name: Ensure landscape-client is installed
      apt:
        name: landscape-client
        state: present

    - name: Ensure Landscape cert directory exists
      file:
        path: /etc/landscape
        state: directory
        mode: '0755'

    - name: Copy Landscape server certificate
      copy:
        src: files/landscape-server.pem
        dest: /etc/landscape/landscape.pem
        mode: '0644'

    - name: Register with Landscape (no registration key required)
      shell: |
        landscape-config \
          --computer-title "$(hostname)" \
          --account-name standalone \
          --url "https://{{ landscape_server_ip }}/message-system" \
          --ssl-public-key /etc/landscape/landscape.pem \
          --ping-url "http://{{ landscape_server_ip }}/ping" \
          --silent
      args:
        creates: /var/lib/landscape/client.conf

    - name: Start Landscape client service
      service:
        name: landscape-client
        state: started
        enabled: true

=====================
import json
from collections import defaultdict
from datetime import datetime

# Load the exported JSON file
with open("computers.json") as f:
    computers = json.load(f)

# Group computers by title (hostname)
dupes = defaultdict(list)

for comp in computers:
    title = comp.get("title")
    if not title:
        continue
    last_ping = comp.get("last_ping_time", "")
    try:
        ping_ts = datetime.fromisoformat(last_ping.replace("Z", ""))
    except:
        ping_ts = datetime(1970, 1, 1)
    dupes[title].append((comp["id"], ping_ts))

# Detect duplicates and keep only the most recent
to_delete = []

for title, entries in dupes.items():
    if len(entries) > 1:
        entries.sort(key=lambda x: x[1], reverse=True)
        # Keep most recent, mark others for deletion
        for comp_id, _ in entries[1:]:
            to_delete.append(comp_id)

# Write IDs to file
with open("duplicates_to_delete.txt", "w") as f:
    for comp_id in to_delete:
        f.write(f"{comp_id}\n")

print(f"Done. {len(to_delete)} duplicate computers marked for deletion.")


===========

for id in $(cat duplicates_to_delete.txt); do
  landscape-api remove-computers --computer-ids=$id \
    --key YOUR_KEY \
    --secret YOUR_SECRET \
    --uri https://10.172.249.104/api/ \
    --ssl-ca-file /etc/ssl/certs/landscape_server.pem
done
